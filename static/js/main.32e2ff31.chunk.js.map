{"version":3,"sources":["store/api.js","store/forecast.js","components/ForcastsList.jsx","App.js","store/reducer.js","store/middleware/api.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","list","loading","lastFetch","reducers","forcastRequested","forcasts","forcastReceived","action","payload","Date","now","forcastRequestFailed","actions","useStyles","makeStyles","root","maxWidth","margin","padding","title","fontSize","pos","marginTop","BugsList","classes","dispatch","useDispatch","forecasts","useSelector","state","useEffect","getState","moment","diff","url","onStart","type","onSuccess","onError","className","Grid","container","spacing","map","forecast","item","xs","key","dt","Card","CardContent","Typography","variant","component","main","temp","color","dt_txt","format","theme","createStyles","display","height","alignItems","justifyContent","marginLeft","App","CircularProgress","ForcastsList","combineReducers","forecastReducer","api","next","a","method","data","axios","request","baseURL","response","message","Boolean","window","location","hostname","match","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.32e2ff31.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { apiCallBegan } from \"./api\";\nimport moment from \"moment\";\n\nconst slice = createSlice({\n  name: \"forecast\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null,\n  },\n  reducers: {\n    forcastRequested: (forcasts) => {\n      forcasts.loading = true;\n    },\n\n    forcastReceived: (forcasts, action) => {\n      forcasts.list = action.payload.list;\n      forcasts.loading = false;\n      forcasts.lastFetch = Date.now();\n    },\n\n    forcastRequestFailed: (forcasts) => {\n      forcasts.loading = false;\n    },\n  },\n});\n\nexport const {\n  forcastReceived,\n  forcastRequested,\n  forcastRequestFailed,\n} = slice.actions;\n\nexport default slice.reducer;\n\n// Action Creators\nconst url =\n  \"/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40&units=metric\";\n\nexport const loadForcasts = () => (dispatch, getState) => {\n  const { lastFetch } = getState().forecasts;\n\n  const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\n  if (diffInMinutes < 10) return;\n\n  return dispatch(\n    apiCallBegan({\n      url,\n      onStart: forcastRequested.type,\n      onSuccess: forcastReceived.type,\n      onError: forcastRequestFailed.type,\n    })\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as moment from \"moment\";\nimport { loadForcasts } from \"../store/forecast\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 992,\n    margin: \"0 auto\",\n    padding: \"2rem 0\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginTop: 12,\n  },\n});\n\nconst BugsList = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const forecasts = useSelector((state) => state.forecasts.list);\n\n  useEffect(() => {\n    dispatch(loadForcasts());\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {forecasts.map((forecast) => (\n          <Grid item xs={4} key={forecast.dt}>\n            <Card className={classes.root}>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  Temp: {forecast.main.temp}Â°C\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                  {moment(forecast.dt_txt).format(\"DD MMM YY\")}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default BugsList;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ForcastsList from \"./components/ForcastsList\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      height: \"100vh\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      \"& > * + *\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  })\n);\n\nfunction App() {\n  const classes = useStyles();\n  const forecasts = useSelector((state) => state.forecasts);\n\n  return (\n    <>\n      {forecasts.loading ? (\n        <div className={classes.root}>\n          <CircularProgress color=\"secondary\" />\n        </div>\n      ) : (\n        <ForcastsList />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport forecastReducer from \"./forecast\";\n\nexport default combineReducers({\n  forecasts: forecastReducer,\n});\n","import axios from \"axios\";\nimport * as actions from \"../api\";\n\nconst api = ({ dispatch }) => (next) => async (action) => {\n  if (action.type !== actions.apiCallBegan.type) return next(action);\n\n  const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n  if (onStart) dispatch({ type: onStart });\n\n  next(action);\n\n  try {\n    const response = await axios.request({\n      baseURL: \"http://api.openweathermap.org\",\n      url,\n      method,\n      data,\n    });\n    // General\n    dispatch(actions.apiCallSuccess(response.data));\n    // Specific\n    if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n  } catch (error) {\n    // General\n    dispatch(actions.apiCallFailed(error.message));\n    // Specific\n    if (onError) dispatch({ type: onError, payload: error.message });\n  }\n};\n\nexport default api;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore from \"./store/configureStore.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nimport api from \"./middleware/api\";\n\nexport default function () {\n  return configureStore({\n    reducer,\n    middleware: [...getDefaultMiddleware(), api],\n  });\n}\n"],"sourceRoot":""}