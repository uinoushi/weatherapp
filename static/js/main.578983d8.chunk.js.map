{"version":3,"sources":["store/api.js","store/forecast.js","components/Carousel.jsx","components/ForcastsList.jsx","App.js","store/reducer.js","store/middleware/api.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","list","loading","lastFetch","reducers","forcastRequested","forcasts","forcastReceived","action","payload","Date","now","forcastRequestFailed","actions","getGroupedForcasts","createSelector","state","forecasts","reduce","accumulator","currentValue","date","moment","dt_txt","format","useStyles","makeStyles","next","position","right","top","SampleNextArrow","props","onClick","classes","IconButton","className","aria-label","fontSize","SamplePrevArrow","Carousel","settings","dots","infinite","speed","slidesToShow","slidesToScroll","nextArrow","prevArrow","this","children","Component","root","maxWidth","margin","padding","pad","boxSizing","title","pos","marginTop","ForcastsList","dispatch","useDispatch","useSelector","useEffect","getState","diff","url","onStart","type","onSuccess","onError","Object","keys","map","key","dt","Card","CardContent","Typography","variant","component","main","temp","color","theme","createStyles","display","height","alignItems","justifyContent","marginLeft","spacing","App","CircularProgress","combineReducers","forecastReducer","api","a","method","data","axios","request","baseURL","response","message","Boolean","window","location","hostname","match","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0OAEaA,EAAeC,YAAa,iBAC5BC,EAAiBD,YAAa,mBAC9BE,EAAgBF,YAAa,kBCCpCG,EAAQC,YAAY,CACxBC,KAAM,WACNC,aAAc,CACZC,KAAM,GACNC,SAAS,EACTC,UAAW,MAEbC,SAAU,CACRC,iBAAkB,SAACC,GACjBA,EAASJ,SAAU,GAGrBK,gBAAiB,SAACD,EAAUE,GAC1BF,EAASL,KAAOO,EAAOC,QAAQR,KAC/BK,EAASJ,SAAU,EACnBI,EAASH,UAAYO,KAAKC,OAG5BC,qBAAsB,SAACN,GACrBA,EAASJ,SAAU,M,EASrBL,EAAMgB,QAHRN,E,EAAAA,gBACAF,E,EAAAA,iBACAO,E,EAAAA,qBAGaf,IAAf,QAsBaiB,EAAqBC,aAChC,SAACC,GAAD,OAAWA,EAAMC,aACjB,SAACA,GAAD,OACEA,EAAUhB,KAAKiB,QAAO,SAACC,EAAaC,GAClC,IAAMC,EAAOC,IAAOF,EAAaG,QAAQC,OAAO,MAGhD,OADAL,EAAYE,GAAZ,sBAAyBF,EAAYE,IAAS,IAA9C,CAAmDD,IAC5CD,IACN,O,uHC1DDM,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,WACVC,MAAO,EACPC,IAAK,KAIT,SAASC,EAAgBC,GAAQ,IACvBC,EAAYD,EAAZC,QACFC,EAAUT,IAChB,OACE,kBAACU,EAAA,EAAD,CAAYC,UAAWF,EAAQP,KAAMU,aAAW,OAAOJ,QAASA,GAC9D,kBAAC,IAAD,CAAcK,SAAS,WAK7B,SAASC,EAAgBP,GAAQ,IACvBC,EAAYD,EAAZC,QACR,OACE,kBAACE,EAAA,EAAD,CAAYE,aAAW,OAAOJ,QAASA,GACrC,kBAAC,IAAD,CAAgBK,SAAS,W,IAqBhBE,E,uKAdX,IAAIC,EAAW,CACbC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,UAAW,kBAAChB,EAAD,MACXiB,UAAW,kBAACT,EAAD,OAGb,OAAO,kBAAC,IAAWE,EAAWQ,KAAKjB,MAAMkB,c,GAZtBC,aCvBjB1B,EAAYC,YAAW,CAC3B0B,KAAM,CACJC,SAAU,IACVC,OAAQ,SACRC,QAAS,aAEXC,IAAK,CACHD,QAAS,OACTE,UAAW,cAEbC,MAAO,CACLpB,SAAU,IAEZqB,IAAK,CACHC,UAAW,MAmCAC,EA/BM,WACnB,IAAM3B,EAAUT,IACVqC,EAAWC,cACX9C,EAAY+C,YAAYlD,GAM9B,OAJAmD,qBAAU,WACRH,GFM8B,SAACA,EAAUI,GAAc,IACjD/D,EAAc+D,IAAWjD,UAAzBd,UAGR,KADsBmB,MAAS6C,KAAK7C,IAAOnB,GAAY,WACnC,IAEpB,OAAO2D,EACLrE,EAAa,CACX2E,IAVJ,4FAWIC,QAAShE,EAAiBiE,KAC1BC,UAAWhE,EAAgB+D,KAC3BE,QAAS5D,EAAqB0D,aEhB/B,IAGD,yBAAKlC,UAAWF,EAAQkB,MACtB,kBAAC,EAAD,KACGqB,OAAOC,KAAKzD,GAAW0D,KAAI,SAACD,GAAD,OAC1B,yBAAKtC,UAAWF,EAAQsB,IAAKoB,IAAK3D,EAAUyD,GAAM,GAAGG,IACnD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,SACSjE,EAAUyD,GAAM,GAAGS,KAAKC,KADjC,SAGA,kBAACJ,EAAA,EAAD,CAAY5C,UAAWF,EAAQyB,IAAK0B,MAAM,iBACvC/D,EAAOL,EAAUyD,GAAM,GAAGnD,QAAQC,OAAO,uBC3CtDC,EAAYC,aAAW,SAAC4D,GAAD,OAC3BC,YAAa,CACXnC,KAAM,CACJoC,QAAS,OACTC,OAAQ,QACRC,WAAY,SACZC,eAAgB,SAChB,YAAa,CACXC,WAAYN,EAAMO,QAAQ,UAuBnBC,MAjBf,WACE,IAAM5D,EAAUT,IACVR,EAAY+C,aAAY,SAAChD,GAAD,OAAWA,EAAMC,aAE/C,OACE,oCACGA,EAAUf,QACT,yBAAKkC,UAAWF,EAAQkB,MACtB,kBAAC2C,EAAA,EAAD,CAAkBV,MAAM,eAG1B,kBAAC,EAAD,Q,OC5BOW,cAAgB,CAC7B/E,UAAWgF,I,2CC2BEC,GA5BH,SAAC,GAAD,IAAGpC,EAAH,EAAGA,SAAH,OAAkB,SAACnC,GAAD,8CAAU,WAAOnB,GAAP,6BAAA2F,EAAA,yDAClC3F,EAAO8D,OAASzD,EAAqByD,KADH,yCACgB3C,EAAKnB,IADrB,gBAGqBA,EAAOC,QAA1D2D,EAH8B,EAG9BA,IAAKgC,EAHyB,EAGzBA,OAAQC,EAHiB,EAGjBA,KAAMhC,EAHW,EAGXA,QAASE,EAHE,EAGFA,UAAWC,EAHT,EAGSA,QAE3CH,GAASP,EAAS,CAAEQ,KAAMD,IAE9B1C,EAAKnB,GAPiC,kBAUb8F,KAAMC,QAAQ,CACnCC,QAAS,iCACTpC,MACAgC,SACAC,SAdkC,OAU9BI,EAV8B,OAiBpC3C,EAASjD,EAAuB4F,EAASJ,OAErC9B,GAAWT,EAAS,CAAEQ,KAAMC,EAAW9D,QAASgG,EAASJ,OAnBzB,kDAsBpCvC,EAASjD,EAAsB,KAAM6F,UAEjClC,GAASV,EAAS,CAAEQ,KAAME,EAAS/D,QAAS,KAAMiG,UAxBlB,0DAAV,wDCSVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,GCHGC,YAAe,CACpBC,UACAC,WAAW,GAAD,mBAAMC,eAAN,CAA8BlB,ODG5CmB,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtB,a","file":"static/js/main.578983d8.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nimport { apiCallBegan } from \"./api\";\nimport moment from \"moment\";\n\nconst slice = createSlice({\n  name: \"forecast\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null,\n  },\n  reducers: {\n    forcastRequested: (forcasts) => {\n      forcasts.loading = true;\n    },\n\n    forcastReceived: (forcasts, action) => {\n      forcasts.list = action.payload.list;\n      forcasts.loading = false;\n      forcasts.lastFetch = Date.now();\n    },\n\n    forcastRequestFailed: (forcasts) => {\n      forcasts.loading = false;\n    },\n  },\n});\n\nexport const {\n  forcastReceived,\n  forcastRequested,\n  forcastRequestFailed,\n} = slice.actions;\n\nexport default slice.reducer;\n\n// Action Creators\nconst url =\n  \"/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40&units=metric\";\n\nexport const loadForcasts = () => (dispatch, getState) => {\n  const { lastFetch } = getState().forecasts;\n\n  const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\n  if (diffInMinutes < 10) return;\n\n  return dispatch(\n    apiCallBegan({\n      url,\n      onStart: forcastRequested.type,\n      onSuccess: forcastReceived.type,\n      onError: forcastRequestFailed.type,\n    })\n  );\n};\n\nexport const getGroupedForcasts = createSelector(\n  (state) => state.forecasts,\n  (forecasts) =>\n    forecasts.list.reduce((accumulator, currentValue) => {\n      const date = moment(currentValue.dt_txt).format(\"DD\");\n\n      accumulator[date] = [...(accumulator[date] || []), currentValue];\n      return accumulator;\n    }, {})\n);\n","import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateNext from \"@material-ui/icons/NavigateNext\";\nimport NavigateBefore from \"@material-ui/icons/NavigateBefore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  next: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n});\n\nfunction SampleNextArrow(props) {\n  const { onClick } = props;\n  const classes = useStyles();\n  return (\n    <IconButton className={classes.next} aria-label=\"next\" onClick={onClick}>\n      <NavigateNext fontSize=\"large\" />\n    </IconButton>\n  );\n}\n\nfunction SamplePrevArrow(props) {\n  const { onClick } = props;\n  return (\n    <IconButton aria-label=\"prev\" onClick={onClick}>\n      <NavigateBefore fontSize=\"large\" />\n    </IconButton>\n  );\n}\n\nclass Carousel extends Component {\n  render() {\n    var settings = {\n      dots: false,\n      infinite: false,\n      speed: 500,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      nextArrow: <SampleNextArrow />,\n      prevArrow: <SamplePrevArrow />,\n    };\n\n    return <Slider {...settings}>{this.props.children}</Slider>;\n  }\n}\n\nexport default Carousel;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as moment from \"moment\";\nimport { loadForcasts, getGroupedForcasts } from \"../store/forecast\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Carousel from \"./Carousel\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 992,\n    margin: \"0 auto\",\n    padding: \"2rem 10px\",\n  },\n  pad: {\n    padding: \"10px\",\n    boxSizing: \"border-box\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginTop: 12,\n  },\n});\n\nconst ForcastsList = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const forecasts = useSelector(getGroupedForcasts);\n\n  useEffect(() => {\n    dispatch(loadForcasts());\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Carousel>\n        {Object.keys(forecasts).map((keys) => (\n          <div className={classes.pad} key={forecasts[keys][0].dt}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  Temp: {forecasts[keys][0].main.temp}Â°C\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                  {moment(forecasts[keys][0].dt_txt).format(\"DD MMM YY\")}\n                </Typography>\n              </CardContent>\n            </Card>\n          </div>\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default ForcastsList;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ForcastsList from \"./components/ForcastsList\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      height: \"100vh\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      \"& > * + *\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  })\n);\n\nfunction App() {\n  const classes = useStyles();\n  const forecasts = useSelector((state) => state.forecasts);\n\n  return (\n    <>\n      {forecasts.loading ? (\n        <div className={classes.root}>\n          <CircularProgress color=\"secondary\" />\n        </div>\n      ) : (\n        <ForcastsList />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport forecastReducer from \"./forecast\";\n\nexport default combineReducers({\n  forecasts: forecastReducer,\n});\n","import axios from \"axios\";\nimport * as actions from \"../api\";\n\nconst api = ({ dispatch }) => (next) => async (action) => {\n  if (action.type !== actions.apiCallBegan.type) return next(action);\n\n  const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n  if (onStart) dispatch({ type: onStart });\n\n  next(action);\n\n  try {\n    const response = await axios.request({\n      baseURL: \"https://api.openweathermap.org\",\n      url,\n      method,\n      data,\n    });\n    // General\n    dispatch(actions.apiCallSuccess(response.data));\n    // Specific\n    if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n  } catch (error) {\n    // General\n    dispatch(actions.apiCallFailed(error.message));\n    // Specific\n    if (onError) dispatch({ type: onError, payload: error.message });\n  }\n};\n\nexport default api;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore from \"./store/configureStore.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nimport api from \"./middleware/api\";\n\nexport default function () {\n  return configureStore({\n    reducer,\n    middleware: [...getDefaultMiddleware(), api],\n  });\n}\n"],"sourceRoot":""}