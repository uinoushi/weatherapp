{"version":3,"sources":["containers/SplashScreen.jsx","components/Barchart.jsx","store/api.js","store/forecast.js","components/Switch.jsx","components/Carousel.jsx","components/ForcastsListItem.jsx","components/Forecasts.jsx","containers/WeatherScreen.jsx","App.js","store/reducer.js","store/middleware/api.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["useStyles","makeStyles","theme","createStyles","root","display","height","alignItems","justifyContent","marginLeft","spacing","SplashScreen","classes","className","CircularProgress","color","Barchart","data","useSelector","state","forecasts","barchart","style","width","maxWidth","margin","fontSize","interval","dataKey","barSize","fill","yAxisId","map","entry","index","key","apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","list","units","loading","lastFetch","reducers","forcastRequested","forcasts","forcastReceived","action","payload","Date","now","forcastRequestFailed","updateUnits","generateDayForcast","datas","removeForcastsPerDay","actions","loadForcasts","dispatch","getState","url","onStart","type","onSuccess","onError","getGroupedForcasts","createSelector","reduce","accumulator","currentValue","date","moment","dt_txt","format","center","Switch","useDispatch","useState","value","setValue","FormControl","component","RadioGroup","row","aria-label","onChange","event","target","FormControlLabel","control","Radio","label","next","position","right","top","slickHide","visibility","SampleNextArrow","props","onClick","IconButton","includes","SamplePrevArrow","Carousel","sliderChange","this","settings","dots","infinite","speed","slidesToShow","slidesToScroll","beforeChange","nextArrow","prevArrow","responsive","breakpoint","initialSlide","children","Component","pad","padding","boxSizing","title","pos","marginTop","ForcastsListItem","forecast","metric","Card","CardContent","Typography","variant","main","temp","Forecasts","keys","Object","content","showBarchart","forcast","m","daily","WeatherScreen","App","useEffect","combineReducers","forecastReducer","api","a","method","axios","request","baseURL","response","message","Boolean","window","location","hostname","match","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8e73892a.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      height: \"100vh\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      \"& > * + *\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  })\n);\n\nconst SplashScreen = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n};\n\nexport default SplashScreen;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { XAxis, ResponsiveContainer, Bar, BarChart, Cell } from \"recharts\";\n\nconst Barchart = () => {\n  const data = useSelector((state) => state.forecasts.barchart);\n\n  return (\n    <div\n      className=\"line-chart-wrapper\"\n      style={{\n        width: \"100%\",\n        maxWidth: 990,\n        height: \"400px\",\n        margin: \"0 auto\",\n      }}\n    >\n      <ResponsiveContainer>\n        <BarChart width={400} height={400} data={data}>\n          <XAxis fontSize={10} interval={0} dataKey=\"name\" />\n          <Bar barSize={80} fill=\"skyblue\" yAxisId=\"a\" dataKey=\"temp\">\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} />\n            ))}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default Barchart;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\nexport const generateDayForcast = createAction(\"api/generateDayForcast\");\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nimport { apiCallBegan } from \"./api\";\nimport moment from \"moment\";\n\nconst slice = createSlice({\n  name: \"forecast\",\n  initialState: {\n    list: [],\n    barchart: [],\n    units: \"imperial\",\n    loading: false,\n    lastFetch: null,\n  },\n  reducers: {\n    forcastRequested: (forcasts) => {\n      forcasts.loading = true;\n    },\n\n    forcastReceived: (forcasts, action) => {\n      forcasts.list = action.payload.list;\n      forcasts.barchart = [];\n      forcasts.loading = false;\n      forcasts.lastFetch = Date.now();\n    },\n\n    forcastRequestFailed: (forcasts) => {\n      forcasts.loading = false;\n    },\n\n    updateUnits: (forcasts, action) => {\n      forcasts.units = action.payload;\n    },\n\n    generateDayForcast: (forcasts, action) => {\n      forcasts.barchart = action.payload.datas;\n    },\n\n    removeForcastsPerDay: (forcasts) => {\n      forcasts.barchart = [];\n    },\n  },\n});\n\nexport const {\n  forcastReceived,\n  forcastRequested,\n  forcastRequestFailed,\n  generateDayForcast,\n  removeForcastsPerDay,\n  updateUnits,\n} = slice.actions;\n\nexport default slice.reducer;\n\n// Action Creators\nexport const loadForcasts = () => (dispatch, getState) => {\n  const { units } = getState().forecasts;\n\n  const url = `/data/2.5/forecast?q=Munich,de&APPID=fbac2a1b66c21f764ad32d558e42b58c&cnt=40&units=${units}`;\n\n  // const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\n\n  return dispatch(\n    apiCallBegan({\n      url,\n      onStart: forcastRequested.type,\n      onSuccess: forcastReceived.type,\n      onError: forcastRequestFailed.type,\n    })\n  );\n};\n\nexport const getGroupedForcasts = createSelector(\n  (state) => state.forecasts,\n  (forecasts) =>\n    forecasts.list.reduce((accumulator, currentValue) => {\n      const date = moment(currentValue.dt_txt).format(\"DD\");\n\n      accumulator[date] = [...(accumulator[date] || []), currentValue];\n      return accumulator;\n    }, {})\n);\n\nexport const generateForcastsPerDay = (forcast, metric) => (dispatch) => {\n  const m = metric === \"metric\" ? \"C\" : \"F\";\n  const datas = [\n    ...forcast.map((daily) => {\n      return {\n        name: daily.main.temp + m,\n        temp: daily.main.temp,\n      };\n    }),\n  ];\n\n  return dispatch(\n    generateDayForcast({\n      datas,\n    })\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { loadForcasts, updateUnits } from \"../store/forecast\";\n\nconst useStyles = makeStyles({\n  center: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});\n\nconst Switch = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"imperial\");\n\n  const handleRadioChange = (event) => {\n    setValue(event.target.value);\n    dispatch(updateUnits(event.target.value));\n    dispatch(loadForcasts(event.target.value));\n  };\n\n  return (\n    <div className={classes.center}>\n      <FormControl component=\"fieldset\">\n        <RadioGroup\n          row\n          aria-label=\"forcast\"\n          name=\"forcast\"\n          value={value}\n          onChange={handleRadioChange}\n        >\n          <FormControlLabel\n            value=\"metric\"\n            control={<Radio />}\n            label=\"Celcius\"\n          />\n          <FormControlLabel\n            value=\"imperial\"\n            control={<Radio />}\n            label=\"Fahrenheit\"\n          />\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default Switch;\n","import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateNext from \"@material-ui/icons/NavigateNext\";\nimport NavigateBefore from \"@material-ui/icons/NavigateBefore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  next: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  slickHide: {\n    visibility: \"hidden\",\n  },\n});\n\nfunction SampleNextArrow(props) {\n  const { className, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <IconButton\n      className={`${classes.next} \n      ${className.includes(\"slick-disabled\") ? classes.slickHide : \"\"}`}\n      aria-label=\"next\"\n      onClick={onClick}\n    >\n      <NavigateNext fontSize=\"large\" />\n    </IconButton>\n  );\n}\n\nfunction SamplePrevArrow(props) {\n  const { className, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <IconButton\n      className={className.includes(\"slick-disabled\") && classes.slickHide}\n      aria-label=\"prev\"\n      onClick={onClick}\n    >\n      <NavigateBefore fontSize=\"large\" />\n    </IconButton>\n  );\n}\n\nclass Carousel extends Component {\n  render() {\n    const { sliderChange } = this.props;\n\n    var settings = {\n      dots: false,\n      infinite: false,\n      speed: 500,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      beforeChange: (index) => sliderChange(index),\n      nextArrow: <SampleNextArrow />,\n      prevArrow: <SamplePrevArrow />,\n      responsive: [\n        {\n          breakpoint: 767,\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            initialSlide: 0,\n            dots: true,\n          },\n        },\n      ],\n    };\n\n    return <Slider {...settings}>{this.props.children}</Slider>;\n  }\n}\n\nexport default Carousel;\n","import React from \"react\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  pad: {\n    padding: \"10px\",\n    boxSizing: \"border-box\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginTop: 12,\n  },\n});\n\nconst ForcastsListItem = ({ forecast, index, sliderChange, metric }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.pad}>\n      <Card onClick={() => sliderChange(index)}>\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {` ${forecast.main.temp} °${metric === \"metric\" ? \"C\" : \"F\"}`}\n          </Typography>\n          <Typography className={classes.pos} color=\"textSecondary\">\n            {moment(forecast.dt_txt).format(\"DD MMM YY\")}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default ForcastsListItem;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Carousel from \"./Carousel\";\nimport ForcastsListItem from \"./ForcastsListItem\";\nimport {\n  getGroupedForcasts,\n  generateForcastsPerDay,\n  removeForcastsPerDay,\n} from \"../store/forecast\";\n\nconst Forecasts = () => {\n  const dispatch = useDispatch();\n  const forecasts = useSelector(getGroupedForcasts);\n  const units = useSelector((state) => state.forecasts.units);\n  const keys = Object.keys(forecasts);\n\n  let content = <div />;\n\n  const showBarchart = (index) => {\n    dispatch(generateForcastsPerDay(forecasts[keys[index]], units));\n  };\n\n  const sliderChange = () => {\n    dispatch(removeForcastsPerDay());\n  };\n\n  if (keys) {\n    content = keys.map((forecast, index) => (\n      <ForcastsListItem\n        forecast={forecasts[forecast][0]}\n        key={index}\n        index={index}\n        metric={units}\n        sliderChange={showBarchart}\n      />\n    ));\n  }\n\n  return <Carousel sliderChange={sliderChange}>{content}</Carousel>;\n};\n\nexport default Forecasts;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Barchart from \"../components/Barchart\";\nimport Switch from \"../components/Switch\";\nimport Forecasts from \"../components/Forecasts\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 992,\n    margin: \"0 auto\",\n    padding: \"2rem 10px\",\n  },\n});\n\nconst WeatherScreen = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Switch />\n      <Forecasts />\n      <Barchart />\n    </div>\n  );\n};\n\nexport default WeatherScreen;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport SplashScreen from \"./containers/SplashScreen\";\nimport WeatherScreen from \"./containers/WeatherScreen\";\nimport { loadForcasts } from \"./store/forecast\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const loading = useSelector((state) => state.forecasts.loading);\n\n  useEffect(() => {\n    dispatch(loadForcasts());\n  }, []);\n\n  return (\n    <>\n      {loading && <SplashScreen />} <WeatherScreen />\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport forecastReducer from \"./forecast\";\n\nexport default combineReducers({\n  forecasts: forecastReducer,\n});\n","import axios from \"axios\";\nimport * as actions from \"../api\";\n\nconst api = ({ dispatch }) => (next) => async (action) => {\n  if (action.type !== actions.apiCallBegan.type) return next(action);\n\n  const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n  if (onStart) dispatch({ type: onStart });\n\n  next(action);\n\n  try {\n    const response = await axios.request({\n      baseURL: \"https://api.openweathermap.org\",\n      url,\n      method,\n      data,\n    });\n    // General\n    dispatch(actions.apiCallSuccess(response.data));\n    // Specific\n    if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n  } catch (error) {\n    // General\n    dispatch(actions.apiCallFailed(error.message));\n    // Specific\n    if (onError) dispatch({ type: onError, payload: error.message });\n  }\n};\n\nexport default api;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore from \"./store/configureStore.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nimport api from \"./middleware/api\";\n\nexport default function () {\n  return configureStore({\n    reducer,\n    middleware: [...getDefaultMiddleware(), api],\n  });\n}\n"],"sourceRoot":""}