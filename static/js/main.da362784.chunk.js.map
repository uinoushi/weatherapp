{"version":3,"sources":["store/api.js","store/forecast.js","components/Carousel.jsx","components/ForcastsList.jsx","components/Barchart.jsx","App.js","store/reducer.js","store/middleware/api.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","list","barchart","loading","lastFetch","reducers","forcastRequested","forcasts","forcastReceived","action","payload","Date","now","forcastRequestFailed","generateDayForcast","datas","actions","loadForcasts","units","dispatch","getState","url","forecasts","moment","diff","onStart","type","onSuccess","onError","getGroupedForcasts","createSelector","state","reduce","accumulator","currentValue","date","dt_txt","format","useStyles","makeStyles","next","position","right","top","slickHide","visibility","SampleNextArrow","props","className","onClick","classes","IconButton","includes","aria-label","fontSize","SamplePrevArrow","Carousel","settings","dots","infinite","speed","slidesToShow","slidesToScroll","focusOnSelect","nextArrow","prevArrow","responsive","breakpoint","initialSlide","this","children","Component","root","maxWidth","margin","padding","pad","boxSizing","title","pos","marginTop","ForcastsList","metric","useDispatch","useSelector","Object","keys","map","key","dt","Card","forcast","m","daily","main","temp","generateForcastsPerDay","CardContent","Typography","variant","component","color","Barchart","data","style","width","height","interval","dataKey","barSize","fill","yAxisId","entry","index","theme","createStyles","display","alignItems","justifyContent","marginLeft","spacing","center","App","useState","value","setValue","useEffect","CircularProgress","FormControl","RadioGroup","row","onChange","event","target","FormControlLabel","control","Radio","label","combineReducers","forecastReducer","api","a","method","axios","request","baseURL","response","message","Boolean","window","location","hostname","match","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.da362784.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\nexport const generateDayForcast = createAction(\"api/generateDayForcast\");\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nimport { apiCallBegan } from \"./api\";\nimport moment from \"moment\";\n\nconst slice = createSlice({\n  name: \"forecast\",\n  initialState: {\n    list: [],\n    barchart: [],\n    loading: false,\n    lastFetch: null,\n  },\n  reducers: {\n    forcastRequested: (forcasts) => {\n      forcasts.loading = true;\n    },\n\n    forcastReceived: (forcasts, action) => {\n      forcasts.list = action.payload.list;\n      forcasts.barchart = [];\n      forcasts.loading = false;\n      forcasts.lastFetch = Date.now();\n    },\n\n    forcastRequestFailed: (forcasts) => {\n      forcasts.loading = false;\n    },\n\n    generateDayForcast: (forcasts, action) => {\n      forcasts.barchart = action.payload.datas;\n    },\n  },\n});\n\nexport const {\n  forcastReceived,\n  forcastRequested,\n  forcastRequestFailed,\n  generateDayForcast,\n} = slice.actions;\n\nexport default slice.reducer;\n\n// Action Creators\nexport const loadForcasts = (units) => (dispatch, getState) => {\n  const url = `/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40&units=${units}`;\n  const { lastFetch } = getState().forecasts;\n\n  const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\n  // if (diffInMinutes < 10) return;\n\n  return dispatch(\n    apiCallBegan({\n      url,\n      onStart: forcastRequested.type,\n      onSuccess: forcastReceived.type,\n      onError: forcastRequestFailed.type,\n    })\n  );\n};\n\nexport const getGroupedForcasts = createSelector(\n  (state) => state.forecasts,\n  (forecasts) =>\n    forecasts.list.reduce((accumulator, currentValue) => {\n      const date = moment(currentValue.dt_txt).format(\"DD\");\n\n      accumulator[date] = [...(accumulator[date] || []), currentValue];\n      return accumulator;\n    }, {})\n);\n\nexport const generateForcastsPerDay = (forcast, metric) => (dispatch) => {\n  const m = metric === \"metric\" ? \"C\" : \"F\";\n  const datas = [\n    ...forcast.map((daily) => {\n      return {\n        name: daily.main.temp + m,\n        temp: daily.main.temp,\n      };\n    }),\n  ];\n\n  return dispatch(\n    generateDayForcast({\n      datas,\n    })\n  );\n};\n","import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateNext from \"@material-ui/icons/NavigateNext\";\nimport NavigateBefore from \"@material-ui/icons/NavigateBefore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  next: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  slickHide: {\n    visibility: \"hidden\",\n  },\n});\n\nfunction SampleNextArrow(props) {\n  const { className, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <IconButton\n      className={`${classes.next} \n      ${className.includes(\"slick-disabled\") ? classes.slickHide : \"\"}`}\n      aria-label=\"next\"\n      onClick={onClick}\n    >\n      <NavigateNext fontSize=\"large\" />\n    </IconButton>\n  );\n}\n\nfunction SamplePrevArrow(props) {\n  const { className, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <IconButton\n      className={className.includes(\"slick-disabled\") && classes.slickHide}\n      aria-label=\"prev\"\n      onClick={onClick}\n    >\n      <NavigateBefore fontSize=\"large\" />\n    </IconButton>\n  );\n}\n\nclass Carousel extends Component {\n  render() {\n    var settings = {\n      dots: false,\n      infinite: false,\n      speed: 500,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      focusOnSelect: true,\n      nextArrow: <SampleNextArrow />,\n      prevArrow: <SamplePrevArrow />,\n      responsive: [\n        {\n          breakpoint: 767,\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            initialSlide: 0,\n            dots: true,\n          },\n        },\n      ],\n    };\n\n    return <Slider {...settings}>{this.props.children}</Slider>;\n  }\n}\n\nexport default Carousel;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as moment from \"moment\";\nimport { getGroupedForcasts, generateForcastsPerDay } from \"../store/forecast\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Carousel from \"./Carousel\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 992,\n    margin: \"0 auto\",\n    padding: \"2rem 10px\",\n  },\n  pad: {\n    padding: \"10px\",\n    boxSizing: \"border-box\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginTop: 12,\n  },\n});\n\nconst ForcastsList = ({ metric }) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const forecasts = useSelector(getGroupedForcasts);\n\n  return (\n    <div className={classes.root}>\n      <Carousel>\n        {Object.keys(forecasts).map((keys) => (\n          <div className={classes.pad} key={forecasts[keys][0].dt}>\n            <Card\n              onClick={() =>\n                dispatch(generateForcastsPerDay(forecasts[keys], metric))\n              }\n            >\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  Temp:\n                  {` ${forecasts[keys][0].main.temp} °${\n                    metric === \"metric\" ? \"C\" : \"F\"\n                  }`}\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                  {moment(forecasts[keys][0].dt_txt).format(\"DD MMM YY\")}\n                </Typography>\n              </CardContent>\n            </Card>\n          </div>\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default ForcastsList;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { XAxis, ResponsiveContainer, Bar, BarChart, Cell } from \"recharts\";\n\nconst Barchart = () => {\n  const data = useSelector((state) => state.forecasts.barchart);\n\n  return (\n    <div\n      className=\"line-chart-wrapper\"\n      style={{\n        width: \"100%\",\n        maxWidth: 990,\n        height: \"400px\",\n        margin: \"0 auto\",\n      }}\n    >\n      <ResponsiveContainer>\n        <BarChart width={400} height={400} data={data}>\n          <XAxis fontSize={10} interval={0} dataKey=\"name\" />\n          <Bar barSize={80} fill=\"skyblue\" yAxisId=\"a\" dataKey=\"temp\">\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} />\n            ))}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default Barchart;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ForcastsList from \"./components/ForcastsList\";\nimport Barchart from \"./components/Barchart\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { loadForcasts } from \"./store/forecast\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      height: \"100vh\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      \"& > * + *\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n    center: {\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n  })\n);\n\nfunction App() {\n  const [value, setValue] = useState(\"imperial\");\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n  const forecasts = useSelector((state) => state.forecasts);\n\n  useEffect(() => {\n    dispatch(loadForcasts(value));\n  }, []);\n\n  const handleRadioChange = (event) => {\n    setValue(event.target.value);\n    dispatch(loadForcasts(event.target.value));\n  };\n\n  return (\n    <>\n      {forecasts.loading ? (\n        <div className={classes.root}>\n          <CircularProgress color=\"secondary\" />\n        </div>\n      ) : (\n        <>\n          <div className={classes.center}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"forcast\"\n                name=\"forcast\"\n                value={value}\n                onChange={handleRadioChange}\n              >\n                <FormControlLabel\n                  value=\"metric\"\n                  control={<Radio />}\n                  label=\"Celcius\"\n                />\n                <FormControlLabel\n                  value=\"imperial\"\n                  control={<Radio />}\n                  label=\"Fahrenheit\"\n                />\n              </RadioGroup>\n            </FormControl>\n          </div>\n          <ForcastsList metric={value} />\n          <Barchart />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport forecastReducer from \"./forecast\";\n\nexport default combineReducers({\n  forecasts: forecastReducer,\n});\n","import axios from \"axios\";\nimport * as actions from \"../api\";\n\nconst api = ({ dispatch }) => (next) => async (action) => {\n  if (action.type !== actions.apiCallBegan.type) return next(action);\n\n  const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n  if (onStart) dispatch({ type: onStart });\n\n  next(action);\n\n  try {\n    const response = await axios.request({\n      baseURL: \"https://api.openweathermap.org\",\n      url,\n      method,\n      data,\n    });\n    // General\n    dispatch(actions.apiCallSuccess(response.data));\n    // Specific\n    if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n  } catch (error) {\n    // General\n    dispatch(actions.apiCallFailed(error.message));\n    // Specific\n    if (onError) dispatch({ type: onError, payload: error.message });\n  }\n};\n\nexport default api;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore from \"./store/configureStore.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nimport api from \"./middleware/api\";\n\nexport default function () {\n  return configureStore({\n    reducer,\n    middleware: [...getDefaultMiddleware(), api],\n  });\n}\n"],"sourceRoot":""}